add_executable(test_mat test_mat.c)
target_link_libraries(test_mat matio ${GETOPT_LIB})

add_executable(test_snprintf test_snprintf.c ${MATIO_SOURCE_DIR}/src/snprintf.c)
target_link_libraries(test_snprintf ${GETOPT_LIB} ${LIBM})

option(MATLAB_TESTING "Enable matlab read tests (requires a function matlab)" ON)
if (MATLAB_TESTING)
    find_program(MATLAB matlab)
else()
    set(MATLAB FALSE)
endif()

macro(PARSE_TEST_ARGUMENTS LIST_VARS DEFAULT_VAR)
    unset(${DEFAULT_VAR})
    foreach(var ${LIST_VARS})
        unset(${var})
    endforeach ()

    set(CURRENT_VAR ${DEFAULT_VAR})
    foreach (arg ${ARGN})
        set(skip_this_arg FALSE)
        foreach(var ${LIST_VARS})
            if (${arg} STREQUAL ${var})
                set(CURRENT_VAR ${var})
                set(skip_this_arg TRUE)
                break()
            endif()
        endforeach ()
        if (NOT skip_this_arg)
            set(${CURRENT_VAR} ${${CURRENT_VAR}} ${arg})
        endif()
    endforeach ()
endmacro()

macro(MATIO_TEST NAME REFERENCE PROG_NAME)
    PARSE_TEST_ARGUMENTS("DEPENDS" "DEFAULT" ${ARGN})
    set(PROG_ARGS "${DEFAULT}")
    SEPARATE_ARGUMENTS(ARGS UNIX_COMMAND "${PROG_ARGS}")
    if (WIN32)
        if (NOT CMAKE_BUILD_TYPE)
            set(CMAKE_BUILD_TYPE Debug)
        endif()
        set(TEST_DIR ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE})
    else()
        set(TEST_DIR ${PROJECT_BINARY_DIR})
    endif()
    set(EXECUTABLE ${TEST_DIR}/${PROG_NAME}${CMAKE_EXECUTABLE_SUFFIX})
    set(OUTPUT ${NAME}.out)
    add_test(${NAME} ${EXECUTABLE} ${PROG_ARGS})
    if (DEPENDS)
        set_tests_properties(${NAME} PROPERTIES DEPENDS "${DEPENDS}")
    endif()
    add_test(${NAME}-COMPARISON
             ${CMAKE_COMMAND} -D TEST_DIR:STRING=${TEST_DIR}
                              -D TEST_OUTPUT:STRING=${OUTPUT}
                              -D TEST_REFERENCE_DIR:STRING=${MATIO_SOURCE_DIR}/test/results
                              -D TEST_RESULT:STRING=${REFERENCE}
                              -P ${MATIO_SOURCE_DIR}/test/runTest.cmake) # To compare output to reference file
    set_tests_properties(${NAME}-COMPARISON PROPERTIES DEPENDS "${NAME}")
endmacro()

function(ProcessTestsuiteFile TestHeader TestFile)

    file(READ ${CMAKE_CURRENT_SOURCE_DIR}/autotest/${TestFile} testsuite)
    string(REPLACE "[" "@" testsuite ${testsuite})
    string(REPLACE "]" "@" testsuite ${testsuite})
    string(REPLACE "\n" "" testsuite ${testsuite})
    string(REGEX MATCHALL [[(AT_SETUP|AT_SKIP_IF)\(@[^@]*@\)|AT_CHECK\(@[^@]*@, *@[^@]*@, *@[^@]*@, *@[^@]*@\)]] testsuite ${testsuite})

    foreach(line ${testsuite})
        if ("${line}" MATCHES "^AT_SETUP")
            set(TESTSEQ 1)
            unset(PREVIOUS_TEST_DEPENDENCY)
            unset(DISABLE_TEST)
            string(REGEX REPLACE [[AT_SETUP\(@(.*)@\)]] "\\1" NameHeader ${line})
        elseif ("${line}" MATCHES "^AT_SKIP_IF")
            if ("${line}" MATCHES "SIZEOF_VOID_P 4")
                if (${SIZEOF_VOID_P} STREQUAL "4")
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "SIZEOF_VOID_P 8")
                if (${SIZEOF_VOID_P} STREQUAL "8")
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "COMPRESSION_ZLIB")
                if (NOT HAVE_ZLIB)
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "EXTENDED_SPARSE")
                if (NOT EXTENDED_SPARSE)
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "HAVE_INT64")
                if (NOT HAVE_INT64)
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "HAVE_UINT64")
                if (NOT HAVE_UINT64)
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "MAT73")
                if (NOT MAT73)
                    set(DISABLE_TEST 1)
                endif()
            elseif ("${line}" MATCHES "MATLABEXE")
                if (NOT MATLAB)
                    set(DISABLE_TEST 1)
                endif()
            else()
                message(SEND_ERROR "Unknown SKIP command [[${line}]].")
            endif()
        elseif ("${line}" MATCHES "^AT_CHECK")
            message("[[${line}]]")
            if (NOT DISABLE_TEST)
                string(REGEX REPLACE [[AT_CHECK\(.*results/([^ ]*).*\)]] "\\1" test_result ${line})
                string(REGEX REPLACE [[AT_CHECK\(.*(test_mat|matdump) ([^@]*)@.*\)]] "\\2" test_args ${line})
                string(REPLACE "$srcdir" "${CMAKE_CURRENT_SOURCE_DIR}" test_args ${test_args})
                string(REPLACE " " ";" test_args ${test_args})
                set(test_name "${TestHeader}-${NameHeader}-${TESTSEQ}")
                math(EXPR TESTSEQ "${TESTSEQ}+1")
                string(REPLACE " " "-" test_name ${test_name})
                string(REPLACE "(" "[" test_name ${test_name})
                string(REPLACE ")" "]" test_name ${test_name})
                if ("${line}" MATCHES "matdump")
                    set(test_name "MATDUMP-${test_name}")
                    MATIO_TEST(${test_name} ${test_result} tools/matdump ${test_args} ${PREVIOUS_TEST_DEPENDENCY})
                elseif ("${line}" MATCHES "test_mat")
                    set(test_name "MATIO-${test_name}")
                    set(test_arg ${test_arg} -o ${CMAKE_CURRENT_BINARY_DIR}/${test_name}.out)
                    MATIO_TEST(${test_name} ${test_result} test/test_mat ${test_args} ${PREVIOUS_TEST_DEPENDENCY})
                endif()
                set(PREVIOUS_TEST_DEPENDENCY DEPENDS ${test_name})
            endif()
        endif()
    endforeach()
endfunction()

file(READ ${CMAKE_CURRENT_SOURCE_DIR}/testsuite.at testsuite)

string(REPLACE "[" "@" testsuite ${testsuite})
string(REPLACE "]" "@" testsuite ${testsuite})
string(REGEX MATCHALL [[(AT_BANNER|m4_include)\(@[^@]*@\)]] testsuite ${testsuite})

foreach(line ${testsuite})
    if ("${line}" MATCHES "^AT_BANNER")
        string(REGEX REPLACE [[AT_BANNER\(@(.*)@\)]] "\\1" NameHeader ${line})
    elseif ("${line}" MATCHES "^m4_include")
        string(REGEX REPLACE [[m4_include\(@(.*)@\)]] "\\1" file ${line})
        ProcessTestsuiteFile(${NameHeader} ${file})
    endif()
endforeach()
